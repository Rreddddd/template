<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:security="http://www.springframework.org/schema/security"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd
">

    <security:authentication-manager alias="authenticationManager" erase-credentials="false">
        <security:authentication-provider user-service-ref="myUserDetailsService">
            <security:password-encoder ref="myDelegatingPasswordEncoder"/>
        </security:authentication-provider>
    </security:authentication-manager>

    <security:http auto-config="false"
                   use-expressions="false"
                   entry-point-ref="myAuthenticationEntryPoint"
                   authentication-manager-ref="authenticationManager">
        <security:access-denied-handler error-page="/error/403"/>

        <security:intercept-url pattern="/error/*" access="IS_AUTHENTICATED_ANONYMOUSLY"/>
        <security:intercept-url pattern="/login" access="IS_AUTHENTICATED_ANONYMOUSLY"/>
        <security:intercept-url pattern="/captcha" access="IS_AUTHENTICATED_ANONYMOUSLY"/>
        <security:intercept-url pattern="/global/**" access="IS_AUTHENTICATED_ANONYMOUSLY"/>
        <security:intercept-url pattern="/pc/css/*" access="IS_AUTHENTICATED_ANONYMOUSLY"/>
        <security:intercept-url pattern="/pc/js/*" access="IS_AUTHENTICATED_ANONYMOUSLY"/>
        <security:intercept-url pattern="/pc/image/*" access="IS_AUTHENTICATED_ANONYMOUSLY"/>

        <security:intercept-url pattern="/sys/*" access="ROLE_ADMIN"/>
        <security:intercept-url pattern="/**" access="ROLE_USER"/>
        <security:form-login login-page="/login"
                             login-processing-url="/loginUser"/>
        <security:logout logout-url="/logout" success-handler-ref="myLogoutSuccessHandler"/>
        <security:remember-me remember-me-cookie="red_remember_template"
                              token-repository-ref="myPersistentTokenRepository"
                              authentication-success-handler-ref="myAuthenticationSuccessHandler"/>
        <security:custom-filter ref="myUsernamePasswordAuthenticationFilter" before="FORM_LOGIN_FILTER"/>
        <security:custom-filter ref="myFilterSecurityInterceptor" before="FILTER_SECURITY_INTERCEPTOR"/>
        <security:csrf disabled="true"/>
    </security:http>

    <bean id="myUserDetailsService" class="security.MyUserDetailsService"/>

    <!--    密码加密-->
    <bean id="myDelegatingPasswordEncoder" class="security.MyDelegatingPasswordEncoder">
        <constructor-arg index="0" value="red"/>
        <constructor-arg index="1">
            <map>
                <entry key="red" value-ref="userPasswordEncoder"/>
            </map>
        </constructor-arg>
    </bean>
    <bean id="userPasswordEncoder" class="security.UserPasswordEncoder">
        <constructor-arg index="0" value="red1"/>
        <constructor-arg index="1">
            <map>
                <entry key="red1" value-ref="userMD5PasswordEncoder"/>
            </map>
        </constructor-arg>
    </bean>
    <bean id="userMD5PasswordEncoder"
          class="security.UserMD5PasswordEncoder">
        <property name="prefixSaltStr" value="12"/>
        <property name="suffixSaltStr" value="tbt"/>
    </bean>

    <bean id="myAuthenticationEntryPoint" class="security.MyAuthenticationEntryPoint"/>
    <bean id="myAuthenticationProvider" class="security.provider.MyAuthenticationProvider"/>
    <!--    登录处理器-->
    <bean id="myAuthenticationSuccessHandler" class="security.handler.MyAuthenticationSuccessHandler"/>
    <bean id="myAuthenticationFailureHandler" class="security.handler.MyAuthenticationFailureHandler"/>
    <!--    验证码过滤器-->
    <bean id="myUsernamePasswordAuthenticationFilter" class="security.filter.MyUsernamePasswordAuthenticationFilter">
        <property name="authenticationManager" ref="authenticationManager"/>
        <property name="filterProcessesUrl" value="/loginUser"/>
        <property name="authenticationSuccessHandler" ref="myAuthenticationSuccessHandler"/>
        <property name="authenticationFailureHandler" ref="myAuthenticationFailureHandler"/>
        <property name="rememberMeServices" ref="myRememberMeServices"/>
    </bean>
    <!--    记住我-->
    <bean id="myPersistentTokenRepository" class="security.MyPersistentTokenRepository"/>
    <bean id="myRememberMeServices"
          class="org.springframework.security.web.authentication.rememberme.PersistentTokenBasedRememberMeServices">
        <constructor-arg name="key" value="0549e670-f108-11eb-ad98-507b9d9a683a"/>
        <constructor-arg name="userDetailsService" ref="myUserDetailsService"/>
        <constructor-arg name="tokenRepository" ref="myPersistentTokenRepository"/>
        <property name="cookieName" value="red_remember_template"/>
        <property name="tokenValiditySeconds" value="259200"/>
    </bean>
    <!--    登出处理器-->
    <bean id="myLogoutSuccessHandler" class="security.handler.MyLogoutSuccessHandler"/>
    <!-- 认证过滤器 -->
    <bean id="myFilterSecurityInterceptor"
          class="org.springframework.security.web.access.intercept.FilterSecurityInterceptor">
        <property name="accessDecisionManager" ref="myAccessDecisionManager"/>
        <property name="authenticationManager" ref="authenticationManager"/>
        <property name="securityMetadataSource" ref="myFilterInvocationSecurityMetadataSource"/>
        <property name="publishAuthorizationSuccess" value="true"/>
    </bean>
    <bean id="myAccessDecisionManager" class="security.MyAccessDecisionManager">
        <constructor-arg index="0">
            <bean class="security.voter.BaseVoter"/>
        </constructor-arg>
        <constructor-arg index="1">
            <list>
                <bean class="security.voter.UserAssignVoter"/>
            </list>
        </constructor-arg>
    </bean>
    <bean id="myFilterInvocationSecurityMetadataSource" class="security.MyFilterInvocationSecurityMetadataSource"/>
    <!--   url验证成功后事件监听 -->
    <bean id="publishAuthorizationSuccessListener" class="security.listener.PublishAuthorizationSuccessListener"/>
</beans>